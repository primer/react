name: environments
on:
  # schedule:
  # # https://crontab.guru/every-night-at-midnight
  # - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  deployments: write

jobs:
  cleanup:
    if: ${{ github.repository == 'primer/react' }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - uses: actions/github-script@5c56fde4671bc2d3592fb0f2c5b5bab9ddae03b1
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const environments = [];

            for await (const response of github.paginate.iterator(
              github.rest.repos.getAllEnvironments,
              {
                owner: 'primer',
                repo: 'react',
                per_page: 100,
              }
            )) {
              environments.push(...response.data);
            }

            core.info(`${environments.length} environments found`);

            const previews = environments.filter(environment => {
              return environment.name.startsWith('storybook-preview');
            });

            core.info(`${previews.length} preview environments found`);

            core.startGroup('Status');

            const changes = [];

            for (const preview of previews) {
              // Assumes that environments are named `storybook-preview-123`
              const segments = preview.name.split('-');
              const number = segments[2];
              const { data: pull } = await github.rest.pulls.get({
                owner: 'primer',
                repo: 'react',
                pull_number: number,
              });

              if (pull.state === 'open') {
                core.info(`${preview.name} is still being used by: ${pull.html_url}`);
                changes.push({
                  preview,
                  pull,
                  type: 'none',
                });
                continue;
              }

              core.info(`Removing ${preview.name} since ${pull.html_url} is ${pull.state}`);

              await github.rest.repos.deleteAnEnvironment({
                owner: 'primer',
                repo: 'react',
                environment_name: preview.name,
              });

              changes.push({
                preview,
                pull,
                type: 'removed',
              });
            }

            core.endGroup();

            await core.summary
              .addHeading('Environments')
              .addTable([
                [
                  {
                    data: 'Environment',
                    header: true,
                  },
                  {
                    data: 'Status',
                    header: true,
                  },
                  {
                    data: 'Pull Request',
                    header: true,
                  },
                ],
                ...changes.map((change) => {
                  return [
                    change.preview.name,
                    change.type === 'removed' ? 'Removed' : '',
                    change.pull.html_url,
                  ];
                }),
              ])
              .write();
