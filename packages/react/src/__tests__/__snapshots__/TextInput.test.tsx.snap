// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextInput renders 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</span>
`;

exports[`TextInput renders block 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</span>
`;

exports[`TextInput renders contrast 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  background-color: var(--bgColor-inset,var(--color-canvas-inset,#f6f8fa));
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</span>
`;

exports[`TextInput renders error 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  border-color: var(--borderColor-danger-emphasis,var(--color-danger-emphasis,#cf222e));
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    aria-invalid="true"
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</span>
`;

exports[`TextInput renders large 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  --inner-action-size: 28px;
  padding-left: 8px;
  padding-right: 8px;
  padding-top: 10px;
  padding-bottom: 10px;
  height: 40px;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
  size="large"
>
  <input
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</span>
`;

exports[`TextInput renders leadingVisual 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <span
    className="TextInput-icon"
  >
    <svg
      aria-hidden="true"
      className="octicon octicon-search"
      fill="currentColor"
      focusable="false"
      height={16}
      style={
        {
          "display": "inline-block",
          "overflow": "visible",
          "userSelect": "none",
          "verticalAlign": "text-bottom",
        }
      }
      viewBox="0 0 16 16"
      width={16}
    >
      <path
        d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
      />
    </svg>
  </span>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
</span>
`;

exports[`TextInput renders leadingVisual 2`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <span
    className="TextInput-icon"
  >
    <svg
      aria-hidden="true"
      className="octicon octicon-search"
      fill="currentColor"
      focusable="false"
      height={16}
      style={
        {
          "display": "inline-block",
          "overflow": "visible",
          "userSelect": "none",
          "verticalAlign": "text-bottom",
        }
      }
      viewBox="0 0 16 16"
      width={16}
    >
      <path
        d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
      />
    </svg>
  </span>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
</span>
`;

exports[`TextInput renders leadingVisual 3`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <span
    className="TextInput-icon"
  >
    <div>
      Trailing
    </div>
  </span>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
</span>
`;

exports[`TextInput renders leadingVisual 4`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <span
    className="TextInput-icon"
  >
    <div>
      Trailing
    </div>
  </span>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
</span>
`;

exports[`TextInput renders monospace 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  font-family: var(--fontStack-monospace,SFMono-Regular,Consolas,"Liberation Mono",Menlo,Courier,monospace);
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</span>
`;

exports[`TextInput renders placeholder 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="560076"
    type="text"
  />
</span>
`;

exports[`TextInput renders small 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  --inner-action-size: 20px;
  min-height: 28px;
  padding-left: 8px;
  padding-right: 8px;
  padding-top: 3px;
  padding-bottom: 3px;
  font-size: 12px;
  line-height: 20px;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
  size="small"
>
  <input
    className="c2"
    data-component="input"
    name="zipcode"
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</span>
`;

exports[`TextInput renders trailingAction icon button 1`] = `
.c3 {
  margin-left: 4px;
  margin-right: 4px;
  line-height: 0;
}

.c4 {
  border-radius: 6px;
  border: 1px solid;
  border-color: transparent;
  font-family: inherit;
  font-weight: 500;
  font-size: 14px;
  cursor: pointer;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  height: 32px;
  padding: 0 12px;
  gap: 8px;
  min-width: -webkit-max-content;
  min-width: -moz-max-content;
  min-width: max-content;
  -webkit-transition: 80ms cubic-bezier(0.65,0,0.35,1);
  transition: 80ms cubic-bezier(0.65,0,0.35,1);
  -webkit-transition-property: color,fill,background-color,border-color;
  transition-property: color,fill,background-color,border-color;
  color: var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));
  background-color: transparent;
  box-shadow: none;
}

.c4:focus:not(:disabled) {
  box-shadow: none;
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -2px;
}

.c4:focus:not(:disabled):not(:focus-visible) {
  outline: solid 1px transparent;
}

.c4:focus-visible:not(:disabled) {
  box-shadow: none;
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -2px;
}

.c4[href] {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c4[href]:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c4:hover {
  -webkit-transition-duration: 80ms;
  transition-duration: 80ms;
}

.c4:active {
  -webkit-transition: none;
  transition: none;
}

.c4[data-inactive] {
  cursor: auto;
}

.c4:disabled {
  cursor: not-allowed;
  box-shadow: none;
  color: var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));
}

.c4:disabled [data-component=ButtonCounter],
.c4:disabled [data-component="leadingVisual"],
.c4:disabled [data-component="trailingAction"] {
  color: inherit;
}

.c4 [data-component=ButtonCounter] {
  font-size: 12px;
}

.c4[data-component=IconButton] {
  display: inline-grid;
  padding: unset;
  place-content: center;
  width: 32px;
  min-width: unset;
}

.c4[data-size="small"] {
  padding: 0 8px;
  height: 28px;
  gap: 4px;
  font-size: 12px;
}

.c4[data-size="small"] [data-component="text"] {
  line-height: calc(20 / 12);
}

.c4[data-size="small"] [data-component=ButtonCounter] {
  font-size: 12px;
}

.c4[data-size="small"] [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 4px;
}

.c4[data-size="small"][data-component=IconButton] {
  width: 28px;
  padding: unset;
}

.c4[data-size="large"] {
  padding: 0 16px;
  height: 40px;
  gap: 8px;
}

.c4[data-size="large"] [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 8px;
}

.c4[data-size="large"][data-component=IconButton] {
  width: 40px;
  padding: unset;
}

.c4[data-block="block"] {
  width: 100%;
}

.c4[data-label-wrap="true"] {
  min-width: -webkit-fit-content;
  min-width: -moz-fit-content;
  min-width: fit-content;
  height: unset;
  min-height: var(--control-medium-size,2rem);
}

.c4[data-label-wrap="true"] [data-component="buttonContent"] {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  padding-block: calc(var(--control-medium-paddingBlock,0.375rem) - 2px);
}

.c4[data-label-wrap="true"] [data-component="text"] {
  white-space: unset;
  word-break: break-word;
}

.c4[data-label-wrap="true"][data-size="small"] {
  height: unset;
  min-height: var(--control-small-size,1.75rem);
}

.c4[data-label-wrap="true"][data-size="small"] [data-component="buttonContent"] {
  padding-block: calc(var(--control-small-paddingBlock,0.25rem) - 2px);
}

.c4[data-label-wrap="true"][data-size="large"] {
  height: unset;
  min-height: var(--control-large-size,2.5rem);
  padding-inline: var(--control-large-paddingInline-spacious,1rem);
}

.c4[data-label-wrap="true"][data-size="large"] [data-component="buttonContent"] {
  padding-block: calc(var(--control-large-paddingBlock,0.625rem) - 2px);
}

.c4[data-inactive]:not([disabled]) {
  background-color: var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));
  border-color: var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));
  color: var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));
}

.c4[data-inactive]:not([disabled]):focus-visible {
  box-shadow: none;
}

.c4 [data-component="leadingVisual"] {
  grid-area: leadingVisual;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4 [data-component="text"] {
  grid-area: text;
  line-height: calc(20/14);
  white-space: nowrap;
}

.c4 [data-component="trailingVisual"] {
  grid-area: trailingVisual;
}

.c4 [data-component="trailingAction"] {
  margin-right: -4px;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4 [data-component="buttonContent"] {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: grid;
  grid-template-areas: "leadingVisual text trailingVisual";
  grid-template-columns: min-content minmax(0,auto) min-content;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
}

.c4 [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 8px;
}

.c4:hover:not([disabled]) {
  background-color: var(--control-transparent-bgColor-hover,var(--color-action-list-item-default-hover-bg,rgba(208,215,222,0.32)));
}

.c4:active:not([disabled]) {
  background-color: var(--control-transparent-bgColor-active,var(--color-action-list-item-default-active-bg,rgba(208,215,222,0.48)));
}

.c4[aria-expanded=true] {
  background-color: var(--control-transparent-bgColor-selected,var(--color-action-list-item-default-selected-bg,rgba(208,215,222,0.24)));
}

.c4[data-component="IconButton"][data-no-visuals] {
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4[data-no-visuals] {
  color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
}

.c4:has([data-component="ButtonCounter"]) {
  color: var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));
}

.c4:disabled[data-no-visuals] {
  color: var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));
}

.c4:disabled[data-no-visuals] [data-component=ButtonCounter] {
  color: inherit;
}

.c4[data-size="small"][data-no-visuals] {
  padding-top: 2px;
  padding-right: 4px;
  padding-bottom: 2px;
  padding-left: 4px;
  position: relative;
}

.c4[data-size="small"][data-no-visuals][data-component="IconButton"] {
  width: var(--inner-action-size);
  height: var(--inner-action-size);
}

.c5 {
  display: none;
}

.c5[popover] {
  position: absolute;
  padding: 0.5em 0.75em;
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  margin: auto;
  -webkit-clip: auto;
  clip: auto;
  white-space: normal;
  font: normal normal 11px/1.5 -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";
  -webkit-font-smoothing: subpixel-antialiased;
  color: var(--fgColor-onEmphasis,var(--color-fg-on-emphasis,#ffffff));
  text-align: center;
  word-wrap: break-word;
  background: var(--bgColor-emphasis,var(--color-neutral-emphasis-plus,#24292f));
  border-radius: 6px;
  border: 0;
  opacity: 0;
  max-width: 250px;
  inset: auto;
  overflow: visible;
}

.c5[popover]:popover-open {
  display: block;
}

.c5[popover].\\:popover-open {
  display: block;
}

.c5::after {
  position: absolute;
  display: block;
  right: 0;
  left: 0;
  height: var(--overlay-offset,0.25rem);
  content: '';
}

.c5[data-direction='n']::after,
.c5[data-direction='ne']::after,
.c5[data-direction='nw']::after {
  top: 100%;
}

.c5[data-direction='s']::after,
.c5[data-direction='se']::after,
.c5[data-direction='sw']::after {
  bottom: 100%;
}

.c5[data-direction='w']::after {
  position: absolute;
  display: block;
  height: 100%;
  width: 8px;
  content: '';
  bottom: 0;
  left: 100%;
}

.c5[data-direction='e']::after {
  position: absolute;
  display: block;
  height: 100%;
  width: 8px;
  content: '';
  bottom: 0;
  right: 100%;
  margin-left: -8px;
}

.c5:popover-open,
.c5:popover-open::before {
  -webkit-animation-name: tooltip-appear;
  animation-name: tooltip-appear;
  -webkit-animation-duration: 0.1s;
  animation-duration: 0.1s;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-timing-function: ease-in;
  animation-timing-function: ease-in;
  -webkit-animation-delay: 0s;
  animation-delay: 0s;
}

.c5.\\:popover-open,
.c5.\\:popover-open::before {
  -webkit-animation-name: tooltip-appear;
  animation-name: tooltip-appear;
  -webkit-animation-duration: 0.1s;
  animation-duration: 0.1s;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-timing-function: ease-in;
  animation-timing-function: ease-in;
  -webkit-animation-delay: 0s;
  animation-delay: 0s;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (forced-colors:active) {
  .c4:focus {
    outline: solid 1px transparent;
  }
}

@media (pointer:coarse) {
  .c4[data-size="small"][data-no-visuals]:after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    top: 50%;
    min-height: 44px;
  }
}

@media (forced-colors:active) {
  .c5 {
    outline: 1px solid transparent;
  }
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
  <span
    className="c3 TextInput-action"
  >
    <button
      aria-labelledby=":rl:"
      className="c4"
      data-block={null}
      data-component="IconButton"
      data-no-visuals={true}
      data-size="small"
      onBlur={[Function]}
      onClick={[MockFunction]}
      onFocus={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      type="button"
    >
      <svg
        aria-hidden="true"
        className="octicon octicon-search"
        fill="currentColor"
        focusable="false"
        height={16}
        style={
          {
            "display": "inline-block",
            "overflow": "visible",
            "userSelect": "none",
            "verticalAlign": "text-bottom",
          }
        }
        viewBox="0 0 16 16"
        width={16}
      >
        <path
          d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
        />
      </svg>
    </button>
    <span
      aria-hidden={true}
      className="c5"
      data-direction="s"
      id=":rl:"
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
    >
      Icon label
    </span>
  </span>
</span>
`;

exports[`TextInput renders trailingAction text button 1`] = `
.c3 {
  margin-left: 4px;
  margin-right: 4px;
  line-height: 0;
}

.c5 {
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c4 {
  border-radius: 6px;
  border: 1px solid;
  border-color: transparent;
  font-family: inherit;
  font-weight: 500;
  font-size: 14px;
  cursor: pointer;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  height: 32px;
  padding: 0 12px;
  gap: 8px;
  min-width: -webkit-max-content;
  min-width: -moz-max-content;
  min-width: max-content;
  -webkit-transition: 80ms cubic-bezier(0.65,0,0.35,1);
  transition: 80ms cubic-bezier(0.65,0,0.35,1);
  -webkit-transition-property: color,fill,background-color,border-color;
  transition-property: color,fill,background-color,border-color;
  color: var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));
  background-color: transparent;
  box-shadow: none;
}

.c4:focus:not(:disabled) {
  box-shadow: none;
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -2px;
}

.c4:focus:not(:disabled):not(:focus-visible) {
  outline: solid 1px transparent;
}

.c4:focus-visible:not(:disabled) {
  box-shadow: none;
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -2px;
}

.c4[href] {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c4[href]:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c4:hover {
  -webkit-transition-duration: 80ms;
  transition-duration: 80ms;
}

.c4:active {
  -webkit-transition: none;
  transition: none;
}

.c4[data-inactive] {
  cursor: auto;
}

.c4:disabled {
  cursor: not-allowed;
  box-shadow: none;
  color: var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));
}

.c4:disabled [data-component=ButtonCounter],
.c4:disabled [data-component="leadingVisual"],
.c4:disabled [data-component="trailingAction"] {
  color: inherit;
}

.c4 [data-component=ButtonCounter] {
  font-size: 12px;
}

.c4[data-component=IconButton] {
  display: inline-grid;
  padding: unset;
  place-content: center;
  width: 32px;
  min-width: unset;
}

.c4[data-size="small"] {
  padding: 0 8px;
  height: 28px;
  gap: 4px;
  font-size: 12px;
}

.c4[data-size="small"] [data-component="text"] {
  line-height: calc(20 / 12);
}

.c4[data-size="small"] [data-component=ButtonCounter] {
  font-size: 12px;
}

.c4[data-size="small"] [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 4px;
}

.c4[data-size="small"][data-component=IconButton] {
  width: 28px;
  padding: unset;
}

.c4[data-size="large"] {
  padding: 0 16px;
  height: 40px;
  gap: 8px;
}

.c4[data-size="large"] [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 8px;
}

.c4[data-size="large"][data-component=IconButton] {
  width: 40px;
  padding: unset;
}

.c4[data-block="block"] {
  width: 100%;
}

.c4[data-label-wrap="true"] {
  min-width: -webkit-fit-content;
  min-width: -moz-fit-content;
  min-width: fit-content;
  height: unset;
  min-height: var(--control-medium-size,2rem);
}

.c4[data-label-wrap="true"] [data-component="buttonContent"] {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  padding-block: calc(var(--control-medium-paddingBlock,0.375rem) - 2px);
}

.c4[data-label-wrap="true"] [data-component="text"] {
  white-space: unset;
  word-break: break-word;
}

.c4[data-label-wrap="true"][data-size="small"] {
  height: unset;
  min-height: var(--control-small-size,1.75rem);
}

.c4[data-label-wrap="true"][data-size="small"] [data-component="buttonContent"] {
  padding-block: calc(var(--control-small-paddingBlock,0.25rem) - 2px);
}

.c4[data-label-wrap="true"][data-size="large"] {
  height: unset;
  min-height: var(--control-large-size,2.5rem);
  padding-inline: var(--control-large-paddingInline-spacious,1rem);
}

.c4[data-label-wrap="true"][data-size="large"] [data-component="buttonContent"] {
  padding-block: calc(var(--control-large-paddingBlock,0.625rem) - 2px);
}

.c4[data-inactive]:not([disabled]) {
  background-color: var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));
  border-color: var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));
  color: var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));
}

.c4[data-inactive]:not([disabled]):focus-visible {
  box-shadow: none;
}

.c4 [data-component="leadingVisual"] {
  grid-area: leadingVisual;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4 [data-component="text"] {
  grid-area: text;
  line-height: calc(20/14);
  white-space: nowrap;
}

.c4 [data-component="trailingVisual"] {
  grid-area: trailingVisual;
}

.c4 [data-component="trailingAction"] {
  margin-right: -4px;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4 [data-component="buttonContent"] {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: grid;
  grid-template-areas: "leadingVisual text trailingVisual";
  grid-template-columns: min-content minmax(0,auto) min-content;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
}

.c4 [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 8px;
}

.c4:hover:not([disabled]) {
  background-color: var(--control-transparent-bgColor-hover,var(--color-action-list-item-default-hover-bg,rgba(208,215,222,0.32)));
}

.c4:active:not([disabled]) {
  background-color: var(--control-transparent-bgColor-active,var(--color-action-list-item-default-active-bg,rgba(208,215,222,0.48)));
}

.c4[aria-expanded=true] {
  background-color: var(--control-transparent-bgColor-selected,var(--color-action-list-item-default-selected-bg,rgba(208,215,222,0.24)));
}

.c4[data-component="IconButton"][data-no-visuals] {
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4[data-no-visuals] {
  color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  padding-top: 2px;
  padding-right: 4px;
  padding-bottom: 2px;
  padding-left: 4px;
  position: relative;
}

.c4[data-no-visuals][data-component="IconButton"] {
  width: var(--inner-action-size);
  height: var(--inner-action-size);
}

.c4:has([data-component="ButtonCounter"]) {
  color: var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));
}

.c4:disabled[data-no-visuals] {
  color: var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));
}

.c4:disabled[data-no-visuals] [data-component=ButtonCounter] {
  color: inherit;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (forced-colors:active) {
  .c4:focus {
    outline: solid 1px transparent;
  }
}

@media (pointer:coarse) {
  .c4[data-no-visuals]:after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    top: 50%;
    min-height: 44px;
  }
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
  <span
    className="c3 TextInput-action"
  >
    <button
      className="c4"
      data-block={null}
      data-no-visuals={true}
      onClick={[MockFunction]}
      style={{}}
      type="button"
    >
      <span
        className="c5"
        data-component="buttonContent"
      >
        <span
          data-component="text"
        >
          Clear
        </span>
      </span>
    </button>
  </span>
</span>
`;

exports[`TextInput renders trailingAction text button with a tooltip 1`] = `
.c3 {
  margin-left: 4px;
  margin-right: 4px;
  line-height: 0;
}

.c5 {
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c4 {
  border-radius: 6px;
  border: 1px solid;
  border-color: transparent;
  font-family: inherit;
  font-weight: 500;
  font-size: 14px;
  cursor: pointer;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  text-align: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  height: 32px;
  padding: 0 12px;
  gap: 8px;
  min-width: -webkit-max-content;
  min-width: -moz-max-content;
  min-width: max-content;
  -webkit-transition: 80ms cubic-bezier(0.65,0,0.35,1);
  transition: 80ms cubic-bezier(0.65,0,0.35,1);
  -webkit-transition-property: color,fill,background-color,border-color;
  transition-property: color,fill,background-color,border-color;
  color: var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));
  background-color: transparent;
  box-shadow: none;
}

.c4:focus:not(:disabled) {
  box-shadow: none;
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -2px;
}

.c4:focus:not(:disabled):not(:focus-visible) {
  outline: solid 1px transparent;
}

.c4:focus-visible:not(:disabled) {
  box-shadow: none;
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -2px;
}

.c4[href] {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c4[href]:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c4:hover {
  -webkit-transition-duration: 80ms;
  transition-duration: 80ms;
}

.c4:active {
  -webkit-transition: none;
  transition: none;
}

.c4[data-inactive] {
  cursor: auto;
}

.c4:disabled {
  cursor: not-allowed;
  box-shadow: none;
  color: var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));
}

.c4:disabled [data-component=ButtonCounter],
.c4:disabled [data-component="leadingVisual"],
.c4:disabled [data-component="trailingAction"] {
  color: inherit;
}

.c4 [data-component=ButtonCounter] {
  font-size: 12px;
}

.c4[data-component=IconButton] {
  display: inline-grid;
  padding: unset;
  place-content: center;
  width: 32px;
  min-width: unset;
}

.c4[data-size="small"] {
  padding: 0 8px;
  height: 28px;
  gap: 4px;
  font-size: 12px;
}

.c4[data-size="small"] [data-component="text"] {
  line-height: calc(20 / 12);
}

.c4[data-size="small"] [data-component=ButtonCounter] {
  font-size: 12px;
}

.c4[data-size="small"] [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 4px;
}

.c4[data-size="small"][data-component=IconButton] {
  width: 28px;
  padding: unset;
}

.c4[data-size="large"] {
  padding: 0 16px;
  height: 40px;
  gap: 8px;
}

.c4[data-size="large"] [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 8px;
}

.c4[data-size="large"][data-component=IconButton] {
  width: 40px;
  padding: unset;
}

.c4[data-block="block"] {
  width: 100%;
}

.c4[data-label-wrap="true"] {
  min-width: -webkit-fit-content;
  min-width: -moz-fit-content;
  min-width: fit-content;
  height: unset;
  min-height: var(--control-medium-size,2rem);
}

.c4[data-label-wrap="true"] [data-component="buttonContent"] {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-align-self: stretch;
  -ms-flex-item-align: stretch;
  align-self: stretch;
  padding-block: calc(var(--control-medium-paddingBlock,0.375rem) - 2px);
}

.c4[data-label-wrap="true"] [data-component="text"] {
  white-space: unset;
  word-break: break-word;
}

.c4[data-label-wrap="true"][data-size="small"] {
  height: unset;
  min-height: var(--control-small-size,1.75rem);
}

.c4[data-label-wrap="true"][data-size="small"] [data-component="buttonContent"] {
  padding-block: calc(var(--control-small-paddingBlock,0.25rem) - 2px);
}

.c4[data-label-wrap="true"][data-size="large"] {
  height: unset;
  min-height: var(--control-large-size,2.5rem);
  padding-inline: var(--control-large-paddingInline-spacious,1rem);
}

.c4[data-label-wrap="true"][data-size="large"] [data-component="buttonContent"] {
  padding-block: calc(var(--control-large-paddingBlock,0.625rem) - 2px);
}

.c4[data-inactive]:not([disabled]) {
  background-color: var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));
  border-color: var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));
  color: var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));
}

.c4[data-inactive]:not([disabled]):focus-visible {
  box-shadow: none;
}

.c4 [data-component="leadingVisual"] {
  grid-area: leadingVisual;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4 [data-component="text"] {
  grid-area: text;
  line-height: calc(20/14);
  white-space: nowrap;
}

.c4 [data-component="trailingVisual"] {
  grid-area: trailingVisual;
}

.c4 [data-component="trailingAction"] {
  margin-right: -4px;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4 [data-component="buttonContent"] {
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
  display: grid;
  grid-template-areas: "leadingVisual text trailingVisual";
  grid-template-columns: min-content minmax(0,auto) min-content;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
}

.c4 [data-component="buttonContent"] > :not(:last-child) {
  margin-right: 8px;
}

.c4:hover:not([disabled]) {
  background-color: var(--control-transparent-bgColor-hover,var(--color-action-list-item-default-hover-bg,rgba(208,215,222,0.32)));
}

.c4:active:not([disabled]) {
  background-color: var(--control-transparent-bgColor-active,var(--color-action-list-item-default-active-bg,rgba(208,215,222,0.48)));
}

.c4[aria-expanded=true] {
  background-color: var(--control-transparent-bgColor-selected,var(--color-action-list-item-default-selected-bg,rgba(208,215,222,0.24)));
}

.c4[data-component="IconButton"][data-no-visuals] {
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
}

.c4[data-no-visuals] {
  color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  padding-top: 2px;
  padding-right: 4px;
  padding-bottom: 2px;
  padding-left: 4px;
  position: relative;
}

.c4[data-no-visuals][data-component="IconButton"] {
  width: var(--inner-action-size);
  height: var(--inner-action-size);
}

.c4:has([data-component="ButtonCounter"]) {
  color: var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));
}

.c4:disabled[data-no-visuals] {
  color: var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));
}

.c4:disabled[data-no-visuals] [data-component=ButtonCounter] {
  color: inherit;
}

.c6 {
  display: none;
  display: inline-block;
}

.c6[popover] {
  position: absolute;
  padding: 0.5em 0.75em;
  width: -webkit-max-content;
  width: -moz-max-content;
  width: max-content;
  margin: auto;
  -webkit-clip: auto;
  clip: auto;
  white-space: normal;
  font: normal normal 11px/1.5 -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";
  -webkit-font-smoothing: subpixel-antialiased;
  color: var(--fgColor-onEmphasis,var(--color-fg-on-emphasis,#ffffff));
  text-align: center;
  word-wrap: break-word;
  background: var(--bgColor-emphasis,var(--color-neutral-emphasis-plus,#24292f));
  border-radius: 6px;
  border: 0;
  opacity: 0;
  max-width: 250px;
  inset: auto;
  overflow: visible;
}

.c6[popover]:popover-open {
  display: block;
}

.c6[popover].\\:popover-open {
  display: block;
}

.c6::after {
  position: absolute;
  display: block;
  right: 0;
  left: 0;
  height: var(--overlay-offset,0.25rem);
  content: '';
}

.c6[data-direction='n']::after,
.c6[data-direction='ne']::after,
.c6[data-direction='nw']::after {
  top: 100%;
}

.c6[data-direction='s']::after,
.c6[data-direction='se']::after,
.c6[data-direction='sw']::after {
  bottom: 100%;
}

.c6[data-direction='w']::after {
  position: absolute;
  display: block;
  height: 100%;
  width: 8px;
  content: '';
  bottom: 0;
  left: 100%;
}

.c6[data-direction='e']::after {
  position: absolute;
  display: block;
  height: 100%;
  width: 8px;
  content: '';
  bottom: 0;
  right: 100%;
  margin-left: -8px;
}

.c6:popover-open,
.c6:popover-open::before {
  -webkit-animation-name: tooltip-appear;
  animation-name: tooltip-appear;
  -webkit-animation-duration: 0.1s;
  animation-duration: 0.1s;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-timing-function: ease-in;
  animation-timing-function: ease-in;
  -webkit-animation-delay: 0s;
  animation-delay: 0s;
}

.c6.\\:popover-open,
.c6.\\:popover-open::before {
  -webkit-animation-name: tooltip-appear;
  animation-name: tooltip-appear;
  -webkit-animation-duration: 0.1s;
  animation-duration: 0.1s;
  -webkit-animation-fill-mode: forwards;
  animation-fill-mode: forwards;
  -webkit-animation-timing-function: ease-in;
  animation-timing-function: ease-in;
  -webkit-animation-delay: 0s;
  animation-delay: 0s;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (forced-colors:active) {
  .c4:focus {
    outline: solid 1px transparent;
  }
}

@media (pointer:coarse) {
  .c4[data-no-visuals]:after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    top: 50%;
    min-height: 44px;
  }
}

@media (forced-colors:active) {
  .c6 {
    outline: 1px solid transparent;
  }
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
  <span
    className="c3 TextInput-action"
  >
    <button
      aria-describedby=":rj:"
      className="c4"
      data-block={null}
      data-no-visuals={true}
      onBlur={[Function]}
      onClick={[MockFunction]}
      onFocus={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      style={{}}
      type="button"
    >
      <span
        className="c5"
        data-component="buttonContent"
      >
        <span
          data-component="text"
        >
          Clear
        </span>
      </span>
    </button>
    <span
      className="c6"
      data-direction="s"
      id=":rj:"
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      role="tooltip"
    >
      Clear input
    </span>
  </span>
</span>
`;

exports[`TextInput renders trailingVisual 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
  <span
    className="TextInput-icon"
  >
    <svg
      aria-hidden="true"
      className="octicon octicon-search"
      fill="currentColor"
      focusable="false"
      height={16}
      style={
        {
          "display": "inline-block",
          "overflow": "visible",
          "userSelect": "none",
          "verticalAlign": "text-bottom",
        }
      }
      viewBox="0 0 16 16"
      width={16}
    >
      <path
        d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
      />
    </svg>
  </span>
</span>
`;

exports[`TextInput renders trailingVisual 2`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
  <span
    className="TextInput-icon"
  >
    <svg
      aria-hidden="true"
      className="octicon octicon-search"
      fill="currentColor"
      focusable="false"
      height={16}
      style={
        {
          "display": "inline-block",
          "overflow": "visible",
          "userSelect": "none",
          "verticalAlign": "text-bottom",
        }
      }
      viewBox="0 0 16 16"
      width={16}
    >
      <path
        d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
      />
    </svg>
  </span>
</span>
`;

exports[`TextInput renders trailingVisual 3`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
  <span
    className="TextInput-icon"
  >
    <div>
      Trailing
    </div>
  </span>
</span>
`;

exports[`TextInput renders trailingVisual 4`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="search"
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Search"
    type="text"
  />
  <span
    className="TextInput-icon"
  >
    <div>
      Trailing
    </div>
  </span>
</span>
`;

exports[`TextInput renders with a loading indicator 1`] = `
[
  .c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: visible;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <input
      className="c2"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c3"
        display="flex"
      >
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":rn:"
            className="c5"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":rn:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c5:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c4 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: visible;
}

.c7 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: hidden;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 12px;
}

.c6 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c6:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <span
          className="c3"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":ro:"
            className="c4"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c5"
            id=":ro:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c6"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <span
          className="c3"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":rp:"
            className="c7"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c5"
            id=":rp:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: visible;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <input
      className="c2"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c3"
        display="flex"
      >
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":rq:"
            className="c5"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":rq:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 {
  visibility: hidden;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c8 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: hidden;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: visible;
  left: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 12px;
}

.c7 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c7:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c3"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":rr:"
            className="c5"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "left": 0,
                "maxWidth": "100%",
                "position": "absolute",
                "top": 0,
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":rr:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c7"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":rs:"
            className="c8"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":rs:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 {
  visibility: hidden;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c8 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: hidden;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: visible;
  left: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 12px;
}

.c7 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c7:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c3"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":rt:"
            className="c5"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "left": 0,
                "maxWidth": "100%",
                "position": "absolute",
                "top": 0,
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":rt:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c7"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":ru:"
            className="c8"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":ru:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 {
  visibility: visible;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c8 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: visible;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: hidden;
  left: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 0;
}

.c7 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c7:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c3"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":rv:"
            className="c5"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "left": 0,
                "maxWidth": "100%",
                "position": "absolute",
                "top": 0,
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":rv:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c7"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r10:"
            className="c8"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":r10:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c5 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c4 {
  visibility: hidden;
}

.c7:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c6 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: visible;
  right: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <input
      className="c2"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c3"
        display="flex"
      >
        <div
          className="c4"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c5"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r11:"
            className="c6"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "maxWidth": "100%",
                "position": "absolute",
                "right": 0,
                "top": 0,
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c7"
            id=":r11:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c3 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c7 {
  visibility: visible;
}

.c5:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c4 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  visibility: visible;
}

.c8 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: hidden;
  right: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 0;
}

.c6 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c6:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <span
          className="c3"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r12:"
            className="c4"
            fill="none"
            height="16px"
            sx={
              {
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="16px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c5"
            id=":r12:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c6"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c7"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c3"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r13:"
            className="c8"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "maxWidth": "100%",
                "position": "absolute",
                "right": 0,
                "top": 0,
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c5"
            id=":r13:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c5 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c4 {
  visibility: hidden;
}

.c7:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c6 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: visible;
  right: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 0;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <input
      className="c2"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c3"
        display="flex"
      >
        <div
          className="c4"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c5"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r14:"
            className="c6"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "maxWidth": "100%",
                "position": "absolute",
                "right": 0,
                "top": 0,
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c7"
            id=":r14:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 {
  visibility: hidden;
}

.c8 {
  visibility: visible;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: visible;
  left: 0;
}

.c9 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: hidden;
  right: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  --inner-action-size: 20px;
  min-height: 28px;
  padding-left: 8px;
  padding-right: 8px;
  padding-top: 3px;
  padding-bottom: 3px;
  font-size: 12px;
  line-height: 20px;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 0;
}

.c7 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c7:focus {
  outline: 0;
}

@media (min-width:768px) {

}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
    size="small"
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c3"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r15:"
            className="c5"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "left": 0,
                "maxWidth": "100%",
                "position": "absolute",
                "top": 0,
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":r15:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c7"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c8"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r16:"
            className="c9"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "maxWidth": "100%",
                "position": "absolute",
                "right": 0,
                "top": 0,
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":r16:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c3 {
  visibility: hidden;
}

.c8 {
  visibility: visible;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: visible;
  left: 0;
}

.c9 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: hidden;
  right: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 0;
}

.c7 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c7:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c3"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r17:"
            className="c5"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "left": 0,
                "maxWidth": "100%",
                "position": "absolute",
                "top": 0,
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":r17:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c7"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c8"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r18:"
            className="c9"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "maxWidth": "100%",
                "position": "absolute",
                "right": 0,
                "top": 0,
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":r18:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
  .c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}

.c4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

.c8 {
  visibility: hidden;
}

.c3 {
  visibility: visible;
}

.c6:not(:focus):not(:active):not(:focus-within) {
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.c5 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: hidden;
  left: 0;
}

.c9 {
  -webkit-animation: rotate-keyframes 1s linear infinite;
  animation: rotate-keyframes 1s linear infinite;
  position: absolute;
  top: 0;
  height: 100%;
  max-width: 100%;
  visibility: visible;
  right: 0;
}

.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
  --inner-action-size: 28px;
  padding-left: 8px;
  padding-right: 8px;
  padding-top: 10px;
  padding-bottom: 10px;
  height: 40px;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 12px;
  padding-right: 12px;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 0;
  padding-right: 0;
}

.c7 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c7:focus {
  outline: 0;
}

@media (min-width:768px) {

}

@media (min-width:768px) {

}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
    aria-busy={true}
    className="c0 c1 TextInput-wrapper"
    onClick={[Function]}
    size="large"
  >
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c3"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r19:"
            className="c5"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "left": 0,
                "maxWidth": "100%",
                "position": "absolute",
                "top": 0,
                "visibility": "hidden",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":r19:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
    <input
      className="c7"
      data-component="input"
      onBlur={[Function]}
      onFocus={[Function]}
      type="text"
    />
    <span
      className="TextInput-icon"
    >
      <div
        className="c2"
        display="flex"
      >
        <div
          className="c8"
        >
          <svg
            aria-hidden="true"
            className="octicon octicon-search"
            fill="currentColor"
            focusable="false"
            height={16}
            style={
              {
                "display": "inline-block",
                "overflow": "visible",
                "userSelect": "none",
                "verticalAlign": "text-bottom",
              }
            }
            viewBox="0 0 16 16"
            width={16}
          >
            <path
              d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"
            />
          </svg>
        </div>
        <span
          className="c4"
        >
          <svg
            aria-hidden={true}
            aria-labelledby=":r1a:"
            className="c9"
            fill="none"
            height="32px"
            sx={
              {
                "height": "100%",
                "maxWidth": "100%",
                "position": "absolute",
                "right": 0,
                "top": 0,
                "visibility": "visible",
              }
            }
            viewBox="0 0 16 16"
            width="32px"
          >
            <circle
              cx="8"
              cy="8"
              r="7"
              stroke="currentColor"
              strokeOpacity="0.25"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
            <path
              d="M15 8a7.002 7.002 0 00-7-7"
              stroke="currentColor"
              strokeLinecap="round"
              strokeWidth="2"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
          <span
            className="c6"
            id=":r1a:"
          >
            Loading
          </span>
        </span>
      </div>
    </span>
  </span>,
]
`;

exports[`TextInput should render a password input 1`] = `
.c0 {
  font-size: 14px;
  line-height: 20px;
  color: var(--fgColor-default,var(--color-fg-default,#1F2328));
  vertical-align: middle;
  background-color: var(--bgColor-default,var(--color-canvas-default,#ffffff));
  border: 1px solid var(--control-borderColor-rest,var(--borderColor-default,var(--color-border-default,#d0d7de)));
  border-radius: 6px;
  outline: none;
  box-shadow: var(--shadow-inset,var(--color-primer-shadow-inset,inset 0 1px 0 rgba(208,215,222,0.2)));
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  min-height: 32px;
  overflow: hidden;
}

.c0 input,
.c0 textarea {
  cursor: text;
}

.c0 select {
  cursor: pointer;
}

.c0 input::-webkit-input-placeholder,
.c0 textarea::-webkit-input-placeholder,
.c0 select::-webkit-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::-moz-placeholder,
.c0 textarea::-moz-placeholder,
.c0 select::-moz-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input:-ms-input-placeholder,
.c0 textarea:-ms-input-placeholder,
.c0 select:-ms-input-placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0 input::placeholder,
.c0 textarea::placeholder,
.c0 select::placeholder {
  color: var(---control-fgColor-placeholder,var(--fgColor-muted,var(--color-fg-muted,#656d76)));
}

.c0:focus-within {
  border-color: var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline: 2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));
  outline-offset: -1px;
}

.c0 > textarea {
  padding: 12px;
}

.c1 {
  background-repeat: no-repeat;
  background-position: right 8px center;
  padding-left: 0;
  padding-right: 0;
}

.c1 > :not(:last-child) {
  margin-right: 8px;
}

.c1 .TextInput-icon,
.c1 .TextInput-action {
  -webkit-align-self: center;
  -ms-flex-item-align: center;
  align-self: center;
  color: var(--fgColor-muted,var(--color-fg-muted,#656d76));
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.c1 > input,
.c1 > select {
  padding-left: 12px;
  padding-right: 12px;
}

.c2 {
  border: 0;
  font-size: inherit;
  font-family: inherit;
  background-color: transparent;
  -webkit-appearance: none;
  color: inherit;
  width: 100%;
}

.c2:focus {
  outline: 0;
}

@media (min-width:768px) {
  .c0 {
    font-size: 14px;
  }
}

<span
  aria-busy={false}
  className="c0 c1 TextInput-wrapper"
  onClick={[Function]}
>
  <input
    className="c2"
    data-component="input"
    name="password"
    onBlur={[Function]}
    onFocus={[Function]}
    type="password"
  />
</span>
`;
