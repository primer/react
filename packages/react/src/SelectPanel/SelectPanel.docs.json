{
  "id": "select_panel",
  "docsId": "select_panel",
  "name": "SelectPanel",
  "status": "alpha",
  "a11yReviewed": "2025-01-08",
  "stories": [
    {
      "id": "components-selectpanel--default"
    },
    {
      "id": "components-selectpanel-features--with-item-dividers"
    },
    {
      "id": "components-selectpanel-features--with-placeholder-for-search-input"
    },
    {
      "id": "components-selectpanel-features--single-select"
    },
    {
      "id": "components-selectpanel-features--multi-select"
    },
    {
      "id": "components-selectpanel-features--with-external-anchor"
    },
    {
      "id": "components-selectpanel-features--with-secondary-action-button"
    },
    {
      "id": "components-selectpanel-features--with-secondary-action-link"
    },
    {
      "id": "components-selectpanel-features--with-groups"
    }
  ],
  "importPath": "@primer/react",
  "props": [
    {
      "name": "items",
      "type": "ItemInput[]",
      "required": true,
      "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
      "defaultValue": ""
    },
    {
      "name": "title",
      "type": "string | React.ReactElement",
      "defaultValue": "\"Select an item\" or \"Select items\"",
      "description": "A descriptive title for the panel"
    },
    {
      "name": "subtitle",
      "type": "string | React.ReactElement",
      "defaultValue": "",
      "description": "When provided, a subtitle is displayed below the title"
    },
    {
      "name": "onOpenChange",
      "type": "( open: boolean, gesture: | 'anchor-click' | 'anchor-key-press' | 'click-outside' | 'escape' | 'selection' | 'cancel' ) => void",
      "defaultValue": "",
      "required": true,
      "description": ""
    },
    {
      "name": "placeholder",
      "type": "string",
      "defaultValue": "",
      "description": "Text used in anchor when there are no selected items"
    },
    {
      "name": "placeholderText",
      "type": "string",
      "defaultValue": "Filter items",
      "description": "Text used as placeholder for search input"
    },
    {
      "name": "inputLabel",
      "type": "string",
      "defaultValue": "Same as placeholderText",
      "description": "The aria-label for the filter input"
    },
    {
      "name": "aria-label",
      "type": "string",
      "description": "aria-label to attach to the base DOM node of the list",
      "defaultValue": ""
    },
    {
      "name": "filterValue",
      "type": "string",
      "description": "The current value of the search input",
      "defaultValue": ""
    },
    {
      "name": "selected",
      "type": "ItemInput | ItemInput[] | undefined",
      "defaultValue": "",
      "required": true,
      "description": "Specify the selected item(s)"
    },
    {
      "name": "open",
      "type": "boolean",
      "required": true,
      "description": "Determines whether the overlay portion of the component should be shown or not",
      "defaultValue": ""
    },
    {
      "name": "anchorId",
      "type": "string",
      "description": "An override to the internal id that will be spread on to the renderAnchor",
      "defaultValue": ""
    },
    {
      "name": "anchorRef",
      "type": "RefObject<HTMLElement>",
      "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
      "defaultValue": ""
    },
    {
      "name": "onSelectedChange",
      "type": "(selected: ItemInput | ItemInput[]) => void",
      "defaultValue": "",
      "required": true,
      "description": "Provide a callback called when the selected item(s) change"
    },
    {
      "name": "onFilterChange",
      "type": "(value: string, e: ChangeEvent<HTMLInputElement>) => void",
      "description": "Callback when the search input changes",
      "defaultValue": ""
    },
    {
      "name": "onCancel",
      "type": "() => void",
      "description": "(Narrow screens and variant=modal) Callback when the user hits cancel or close",
      "defaultValue": ""
    },
    {
      "name": "overlayProps",
      "type": "Partial<OverlayProps>",
      "defaultValue": "",
      "description": "See [Overlay props](/react/Overlay#props)."
    },
    {
      "name": "textInputProps",
      "type": "Partial<Omit<TextInputProps, 'onChange'>>",
      "defaultValue": "",
      "description": "See [TextInput props](/react/TextInput#props)."
    },
    {
      "name": "variant",
      "type": "'anchored' | 'modal'",
      "description": "Anchored by default, SelectPanel can be opened as a modal",
      "defaultValue": "'anchored'"
    },
    {
      "name": "footer",
      "type": "string | React.ReactElement",
      "defaultValue": "null",
      "description": "Please use `secondaryAction` instead.",
      "deprecated": true
    },
    {
      "name": "message",
      "type": "{title: string | React.ReactElement; variant: 'empty' | 'error' | 'warning';  body: React.ReactNode; icon?:React.ComponentType<IconProps>;action?: React.ReactElement;}",
      "defaultValue": "A default empty message is provided if this option is not configured. Supply a custom empty message to override the default.",
      "description": "Message to display in the panel in case of error or empty results"
    },
    {
      "name": "notice",
      "type": "{text: string | React.ReactElement; variant: 'empty' | 'error' | 'warning';}",
      "description": "Optional notice to display on top of the panel"
    },
    {
      "name": "secondaryAction",
      "type": "React.ReactElement",
      "defaultValue": "null",
      "description": "Secondary action, it will be rendered in the footer of the panel. Use `SecondaryActionButton` or `SecondaryActionLink` for the action."
    },
    {
      "name": "showSelectedOptionsFirst",
      "type": "boolean",
      "description": "Whether to display the selected items at the top of the list",
      "default": "true"
    },
    {
      "name": "showSelectAll",
      "type": "boolean",
      "defaultValue": "false",
      "description": "When `true` and on a multi-select SelectPanel, displays a 'Select all' checkbox that allows users to select or deselect all visible items at once. The checkbox label automatically toggles between 'Select all' and 'Deselect all' based on the current selection state, and shows an indeterminate state when some items are selected."
    },
    {
      "name": "disableFullscreenOnNarrow",
      "type": "boolean",
      "description": "Whether to disable fullscreen behavior on narrow viewports. When `true`, the panel will maintain its anchored position regardless of viewport size. When `false`, the panel will go fullscreen on narrow viewports (if feature flag is enabled).",
      "defaultValue": "undefined (uses feature flag default)"
    },
    {
      "name": "loading",
      "type": "boolean",
      "defaultValue": "false",
      "description": "Whether the panel is in a loading state. When `true`, the panel will display a loading spinner. If `loading` is not provided, the panel will infer the loading state based on the contents of `items` available."
    },
    {
      "name": "align",
      "type": "'start' | 'end' | 'center'",
      "defaultValue": "'start'",
      "description": "Determines the alignment of the panel relative to the anchor. Defaults to 'start' which aligns the left edge of the panel with the left edge of the anchor."
    }
  ],
  "subcomponents": []
}