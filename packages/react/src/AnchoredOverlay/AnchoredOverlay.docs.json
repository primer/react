{
  "id": "anchored_overlay",
  "name": "AnchoredOverlay",
  "status": "alpha",
  "a11yReviewed": false,
  "stories": [],
  "importPath": "@primer/react",
  "props": [
    {
      "name": "open",
      "type": "boolean",
      "defaultValue": "false",
      "description": "Determines whether the overlay portion of the component should be shown or not."
    },
    {
      "name": "onOpen",
      "type": "(gesture: 'anchor-click' | 'anchor-key-press') => unknown",
      "defaultValue": "",
      "description": "A callback that is called whenever the overlay is currently closed and an \"open gesture\" is detected."
    },
    {
      "name": "onClose",
      "type": "(gesture: 'anchor-click' | 'click-outside' | 'escape') => unknown",
      "defaultValue": "",
      "description": "A callback that is called whenever the overlay is currently open and a \"close gesture\" is detected."
    },
    {
      "name": "renderAnchor",
      "type": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => JSX.Element",
      "defaultValue": "",
      "description": "A custom function component used to render the anchor element. When renderAnchor is null, an anchorRef is required."
    },
    {
      "name": "anchorRef",
      "type": "React.RefObject<HTMLElement>",
      "defaultValue": "",
      "description": "An override to the internal `renderAnchor` ref that will be used to position the overlay. When `renderAnchor` is `null`, this can be used to make an anchor that is detached from ` AnchoredOverlay `."
    },
    {
      "name": "anchorId",
      "type": "string",
      "defaultValue": "",
      "description": "An override to the internal id that will be passed to the anchor."
    },
    {
      "name": "side",
      "type": "| 'inside-top' | 'inside-bottom' | 'inside-left' | 'inside-right' | 'inside-center' | 'outside-top' | 'outside-bottom' | 'outside-left' | 'outside-right'",
      "defaultValue": "'outside-bottom'",
      "description": ""
    },
    {
      "name": "align",
      "type": "'start' | 'center' | 'end'",
      "defaultValue": "'start'",
      "description": ""
    },
    {
      "name": "alignmentOffset",
      "type": "number",
      "defaultValue": "4",
      "description": "An additional offset, in pixels, to move the floating element from the aligning edge. Positive values move the floating element in the direction of center-alignment. Negative values move the floating element away from center-alignment. When align is `'center`, positive offsets move the floating element right (top or bottom anchor side) or down (left or right anchor side). If using outside positioning, or if `align` is set to `'center'`, this defaults to `0` instead of `4`."
    },
    {
      "name": "anchorOffset",
      "type": "number",
      "defaultValue": "4",
      "description": "The number of pixels between the anchor edge and the floating element. Positive values move the floating element farther from the anchor element (for outside positioning) or further inside the anchor element (for inside positioning). Negative values have the opposite effect. If `side` is set to `'inside-center'`, this defaults to `0` instead of `4`."
    },
    {
      "name": "overlayProps",
      "type": "Partial<OverlayProps>",
      "defaultValue": "",
      "description": "Props to be spread on the internal `Overlay` component."
    },
    {
      "name": "focusTrapSettings",
      "type": "Partial<FocusTrapHookSettings>",
      "defaultValue": "",
      "description": "Settings to apply to the focus trap on the internal `Overlay` component."
    },
    {
      "name": "focusZoneSettings",
      "type": "Partial<FocusZoneHookSettings>",
      "defaultValue": "",
      "description": "Settings to apply to the focus zone on the internal `Overlay` component."
    },
    {
      "name": "className",
      "type": "string",
      "defaultValue": "",
      "description": "Class name for custom styling."
    }
  ]
}
